name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    strategy:
      max-parallel: 1
      matrix:
        include:
          - os: ubuntu-latest
            go-version: '1.21'
            arch: x64
          - os: windows-latest
            go-version: '1.21'
            arch: x64
          - os: macos-13  # Intel-based macOS runner
            go-version: '1.21'
            arch: x64
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl unzip bc

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install make
        choco install mingw

    - name: Download RTI Connector libraries
      run: |
        go run ./cmd/download-libs -force

    - name: Verify library installation (Linux)
      if: runner.os == 'Linux'
      run: |
        ls -la rticonnextdds-connector/lib/
        echo "Library files in linux-x64:"
        ls -la rticonnextdds-connector/lib/linux-x64/ || echo "linux-x64 directory not found"

    - name: Verify library installation (Windows)
      if: runner.os == 'Windows'
      run: |
        dir rticonnextdds-connector\lib\
        echo "Library files in win-x64:"
        dir rticonnextdds-connector\lib\win-x64\ || echo "win-x64 directory not found"

    - name: Verify library installation (macOS)
      if: runner.os == 'macOS'
      run: |
        ls -la rticonnextdds-connector/lib/
        echo "Library files in osx-x64:"
        ls -la rticonnextdds-connector/lib/osx-x64/ || echo "osx-x64 directory not found"

    - name: Install dependencies
      run: |
        go get -v -t -d ./...
        go mod tidy

    - name: Build (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "🔨 Building Go packages on ${{ runner.os }}..."
        if ! go build -v ./...; then
          echo "❌ Build failed. Checking library installation..."
          echo "RTI Connector directory contents:"
          find rticonnextdds-connector -type f -name "*.so" -o -name "*.dylib" -o -name "*.dll" 2>/dev/null || echo "No library files found"
          echo "CGO environment:"
          go env CGO_ENABLED
          exit 1
        fi
        echo "✅ Build successful on ${{ runner.os }}"
      shell: bash

    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "Building Go packages on Windows..."
        go build -v ./...
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Build failed. Checking library installation..."
          Write-Host "RTI Connector directory contents:"
          if (Test-Path "rticonnextdds-connector") {
            Get-ChildItem -Recurse rticonnextdds-connector -Include "*.dll", "*.lib" | Select-Object FullName
          } else {
            Write-Host "Directory not found"
          }
          Write-Host "CGO environment:"
          go env CGO_ENABLED
          exit 1
        }
        Write-Host "Build successful on Windows"
      shell: powershell

    - name: Make test script executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x test_improvements.sh

    - name: Run comprehensive test suite (Unix)
      if: runner.os != 'Windows'
      run: ./test_improvements.sh

    - name: Run comprehensive test suite (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "Running tests on Windows..."
        $libPath = Join-Path $PWD "rticonnextdds-connector\lib\win-x64"
        $env:PATH = "$libPath;$env:PATH"
        Write-Host "Added to PATH: $libPath"
        Write-Host "Current PATH: $env:PATH"
        go test -race -coverprofile="coverage.out" -covermode=atomic ./...
        if ($LASTEXITCODE -eq 0) {
          go tool cover -func="coverage.out" | Out-File -FilePath "coverage.txt" -Encoding utf8
          Write-Host "Tests completed successfully"
        } else {
          Write-Host "Tests failed"
          exit 1
        }
      shell: powershell

    - name: Generate coverage report (Linux only)
      if: runner.os == 'Linux'
      run: |
        go tool cover -func=coverage.txt > coverage_report.txt
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat coverage_report.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # Extract coverage percentage
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY

    - name: Update coverage badge (Linux only)
      if: runner.os == 'Linux' && github.ref == 'refs/heads/master'
      run: |
        # Extract coverage percentage and convert to integer (remove decimal)
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print substr($3, 1, length($3)-1)}')
        COVERAGE_INT=$(echo "$COVERAGE" | cut -d'.' -f1)
        
        # Determine badge color based on coverage percentage
        if [ "$COVERAGE_INT" -ge 90 ]; then
          COLOR="brightgreen"
        elif [ "$COVERAGE_INT" -ge 80 ]; then
          COLOR="green"
        elif [ "$COVERAGE_INT" -ge 70 ]; then
          COLOR="yellow"
        elif [ "$COVERAGE_INT" -ge 60 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        # Update README.md with new coverage badge
        sed -i "s/coverage-[0-9.]*%25-[a-z]*/coverage-${COVERAGE}%25-${COLOR}/g" README.md
        
        # Check if there are changes to commit
        if ! git diff --quiet README.md; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update coverage badge to ${COVERAGE}%" || exit 0
          git push
        fi

    - name: Upload coverage artifact (Linux only)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.txt
          coverage_report.txt

  memory-usage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl unzip bc

    - name: Download RTI Connector libraries
      run: |
        go run ./cmd/download-libs -force

    - name: Run memory usage analysis
      run: |
        echo "=== Memory Usage Analysis ==="
        echo "Measuring RTI Connector memory consumption..."
        
        # Run single iteration to measure baseline memory usage
        MEMTEST_ITERATIONS=1 go test -v -run=TestMemoryUsage
